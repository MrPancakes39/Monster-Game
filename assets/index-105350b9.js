var f=Object.defineProperty;var y=(n,e,t)=>e in n?f(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var c=(n,e,t)=>(y(n,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))s(a);new MutationObserver(a=>{for(const r of a)if(r.type==="childList")for(const o of r.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function t(a){const r={};return a.integrity&&(r.integrity=a.integrity),a.referrerpolicy&&(r.referrerPolicy=a.referrerpolicy),a.crossorigin==="use-credentials"?r.credentials="include":a.crossorigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(a){if(a.ep)return;a.ep=!0;const r=t(a);fetch(a.href,r)}})();const h=(n,e)=>Math.floor(Math.random()*(e+1-n)+n),H=(n,e,t)=>Math.min(Math.max(e,n),t),i=n=>{let e=document.createElement("div");return e.innerHTML=n,e.firstElementChild},l=document.querySelector("#battle-log"),d=document.querySelector("#player-health"),p=document.querySelector("#monster-health"),m=document.querySelector(".actions"),k=document.querySelector("#game-status .card--info"),v=document.querySelector("#start-over");class g{constructor(e={min:5,max:20},t={min:12,max:25}){c(this,"valueRange");c(this,"specialValueRange");c(this,"currentHeal",3);this.valueRange=e,this.specialValueRange=t,l.innerHTML="",this.setHealth("player",100),this.setHealth("monster",100),m.dataset.hidden="false"}opposite(e){return e==="monster"?"player":"monster"}setHealth(e,t){const s=e==="monster"?p:d;t=H(t,0,100),s.style.width=`${t}%`}getHealth(e){return parseInt((e==="monster"?p:d).style.width)}logMessage(e,t,s,a){const r=e==="monster"?'<span class="monster">Monster</span>':'<span class="player">Player</span>',o=`<span class="${a?"gain":"loss"}">${s}</span>`;return`${r} ${t} ${o}`}doAction(e){const t=e.target;let s=!1;switch(t.getAttribute("id")){case"atk":s=this.doAttack("player"),this.currentHeal=3;break;case"sp-atk":s=this.doSpecial(),this.currentHeal=3;break;case"heal":s=this.doHeal();break;case"give-up":this.doGiveUp();break}s&&(this.doAttack("monster"),this.checkWinner())}doAttack(e){const t=this.opposite(e),s=this.getHealth(t),a=h(this.valueRange.min,this.valueRange.max),r=this.logMessage(e,"attacks and deals",a,!1);return this.setHealth(t,s-a),l.prepend(i(`<p>${r}</p>`)),!0}doSpecial(){const e=this.getHealth("player"),t=this.getHealth("monster"),s=e===t&&e===100,a=e<=t-20;if(s||a){const r=h(this.specialValueRange.min,this.specialValueRange.max),o=this.logMessage("player","attacks and deals",r,!1);return this.setHealth("monster",t-r),l.prepend(i(`<p>${o}</p>`)),!0}return l.prepend(i("<p>You can't use the special attack, it's for emergencies.</p>")),!1}doHeal(){const e=this.getHealth("player");if(e===100)return l.prepend(i("<p>You are at a 100 health, already! You can't heal.</p>")),!1;if(this.currentHeal){this.currentHeal--;const t=h(this.specialValueRange.min,this.specialValueRange.max),s=this.logMessage("player","heals themselves for",t,!0);return this.setHealth("player",e+t),l.prepend(i(`<p>${s}</p>`)),!0}return l.prepend(i("<p>You healed 3 times, already! Attack instead.</p>")),!1}doGiveUp(){let e=prompt("Are you sure you want to give up? [y/N]:");e=e==null?void 0:e.toLowerCase().trim(),(e==="yes"||e==="y")&&this.GameOver("lose")}GameOver(e){let t="";switch(e){case"win":t="You win!";break;case"lose":t="You lost :(";break;case"draw":t="It's a draw!";break}m.dataset.hidden="true",k.textContent=t}checkWinner(){const e=this.getHealth("player"),t=this.getHealth("monster");if(e!==0&&t!==0)return;let s=e===t?"draw":e>0?"win":"lose";this.GameOver(s)}}let u=new g;document.querySelectorAll(".action-btn").forEach(n=>n.addEventListener("click",u.doAction.bind(u)));v.addEventListener("click",()=>u=new g);
